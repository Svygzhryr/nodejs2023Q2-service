generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Albums {
  id        String   @id @db.Uuid
  name      String   @db.VarChar
  year      Int
  artist_id String?  @db.Uuid
  Artists   Artists? @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_fkey")
  Favs      Favs[]
  Tracks    Tracks[]
}

model Artists {
  id     String   @id @db.Uuid
  name   String   @db.VarChar
  grammy Boolean
  Albums Albums[]
  Favs   Favs[]
  Tracks Tracks[]
}

model Favs {
  artists String?  @db.Uuid
  albums  String?  @db.Uuid
  tracks  String?  @db.Uuid
  id      Int      @id @default(autoincrement())
  Albums  Albums?  @relation(fields: [albums], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_fkey")
  Artists Artists? @relation(fields: [artists], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_fkey")
  Tracks  Tracks?  @relation(fields: [tracks], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tracks_fkey")
}

model Tracks {
  id        String   @id @db.Uuid
  name      String   @db.VarChar
  duration  Int
  artist_id String?  @db.Uuid
  album_id  String?  @db.Uuid
  Favs      Favs[]
  Albums    Albums?  @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_fkey")
  Artists   Artists? @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_fkey")
}

model Users {
  id        String @id @db.Uuid
  login     String @db.VarChar
  password  String @db.VarChar
  version   Int
  createdAt BigInt
  updatedAt BigInt
}
